//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  template1: Template1;
  template1Connection: Template1Connection;
  template2: Template2;
  template2Connection: Template2Connection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTemplate1Args = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTemplate1ConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Template1Filter>;
};


export type QueryTemplate2Args = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTemplate2ConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Template2Filter>;
};

export type DocumentFilter = {
  template1?: InputMaybe<Template1Filter>;
  template2?: InputMaybe<Template2Filter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Template1 | Template2 | Folder;

export type Template1 = Node & Document & {
  __typename?: 'Template1';
  title: Scalars['String']['output'];
  subtitle?: Maybe<Scalars['String']['output']>;
  videoUrl?: Maybe<Scalars['String']['output']>;
  ctaText?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
  footerText?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Template1Filter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  videoUrl?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  footerText?: InputMaybe<StringFilter>;
};

export type Template1ConnectionEdges = {
  __typename?: 'Template1ConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Template1>;
};

export type Template1Connection = Connection & {
  __typename?: 'Template1Connection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Template1ConnectionEdges>>>;
};

export type Template2 = Node & Document & {
  __typename?: 'Template2';
  headline: Scalars['String']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  ctaText?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Template2Filter = {
  headline?: InputMaybe<StringFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Template2ConnectionEdges = {
  __typename?: 'Template2ConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Template2>;
};

export type Template2Connection = Connection & {
  __typename?: 'Template2Connection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Template2ConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateTemplate1: Template1;
  createTemplate1: Template1;
  updateTemplate2: Template2;
  createTemplate2: Template2;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateTemplate1Args = {
  relativePath: Scalars['String']['input'];
  params: Template1Mutation;
};


export type MutationCreateTemplate1Args = {
  relativePath: Scalars['String']['input'];
  params: Template1Mutation;
};


export type MutationUpdateTemplate2Args = {
  relativePath: Scalars['String']['input'];
  params: Template2Mutation;
};


export type MutationCreateTemplate2Args = {
  relativePath: Scalars['String']['input'];
  params: Template2Mutation;
};

export type DocumentUpdateMutation = {
  template1?: InputMaybe<Template1Mutation>;
  template2?: InputMaybe<Template2Mutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  template1?: InputMaybe<Template1Mutation>;
  template2?: InputMaybe<Template2Mutation>;
};

export type Template1Mutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  videoUrl?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  footerText?: InputMaybe<Scalars['String']['input']>;
};

export type Template2Mutation = {
  headline?: InputMaybe<Scalars['String']['input']>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Template1PartsFragment = { __typename: 'Template1', title: string, subtitle?: string | null, videoUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, footerText?: string | null };

export type Template2PartsFragment = { __typename: 'Template2', headline: string, imageUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, body?: any | null };

export type Template1QueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Template1Query = { __typename?: 'Query', template1: { __typename: 'Template1', id: string, title: string, subtitle?: string | null, videoUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, footerText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Template1ConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Template1Filter>;
}>;


export type Template1ConnectionQuery = { __typename?: 'Query', template1Connection: { __typename?: 'Template1Connection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Template1ConnectionEdges', cursor: string, node?: { __typename: 'Template1', id: string, title: string, subtitle?: string | null, videoUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, footerText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Template2QueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Template2Query = { __typename?: 'Query', template2: { __typename: 'Template2', id: string, headline: string, imageUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Template2ConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Template2Filter>;
}>;


export type Template2ConnectionQuery = { __typename?: 'Query', template2Connection: { __typename?: 'Template2Connection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Template2ConnectionEdges', cursor: string, node?: { __typename: 'Template2', id: string, headline: string, imageUrl?: string | null, ctaText?: string | null, ctaLink?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const Template1PartsFragmentDoc = gql`
    fragment Template1Parts on Template1 {
  __typename
  title
  subtitle
  videoUrl
  ctaText
  ctaLink
  footerText
}
    `;
export const Template2PartsFragmentDoc = gql`
    fragment Template2Parts on Template2 {
  __typename
  headline
  imageUrl
  ctaText
  ctaLink
  body
}
    `;
export const Template1Document = gql`
    query template1($relativePath: String!) {
  template1(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Template1Parts
  }
}
    ${Template1PartsFragmentDoc}`;
export const Template1ConnectionDocument = gql`
    query template1Connection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Template1Filter) {
  template1Connection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Template1Parts
      }
    }
  }
}
    ${Template1PartsFragmentDoc}`;
export const Template2Document = gql`
    query template2($relativePath: String!) {
  template2(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Template2Parts
  }
}
    ${Template2PartsFragmentDoc}`;
export const Template2ConnectionDocument = gql`
    query template2Connection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Template2Filter) {
  template2Connection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Template2Parts
      }
    }
  }
}
    ${Template2PartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      template1(variables: Template1QueryVariables, options?: C): Promise<{data: Template1Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template1QueryVariables, query: string}> {
        return requester<{data: Template1Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template1QueryVariables, query: string}, Template1QueryVariables>(Template1Document, variables, options);
      },
    template1Connection(variables?: Template1ConnectionQueryVariables, options?: C): Promise<{data: Template1ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template1ConnectionQueryVariables, query: string}> {
        return requester<{data: Template1ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template1ConnectionQueryVariables, query: string}, Template1ConnectionQueryVariables>(Template1ConnectionDocument, variables, options);
      },
    template2(variables: Template2QueryVariables, options?: C): Promise<{data: Template2Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template2QueryVariables, query: string}> {
        return requester<{data: Template2Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template2QueryVariables, query: string}, Template2QueryVariables>(Template2Document, variables, options);
      },
    template2Connection(variables?: Template2ConnectionQueryVariables, options?: C): Promise<{data: Template2ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template2ConnectionQueryVariables, query: string}> {
        return requester<{data: Template2ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Template2ConnectionQueryVariables, query: string}, Template2ConnectionQueryVariables>(Template2ConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  